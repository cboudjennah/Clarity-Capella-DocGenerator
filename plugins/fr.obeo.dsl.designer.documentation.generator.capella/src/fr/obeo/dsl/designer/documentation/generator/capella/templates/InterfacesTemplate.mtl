[comment encoding = UTF-8 /]
[module InterfacesTemplate(
'http://www.eclipse.org/sirius/1.1.0',
'http://www.eclipse.org/sirius/diagram/1.1.0',
'http://www.polarsys.org/capella/core/modeller/1.0.0', 
'http://www.polarsys.org/capella/core/core/1.0.0', 
'http://www.polarsys.org/capella/core/oa/1.0.0', 
'http://www.polarsys.org/capella/core/ctx/1.0.0', 
'http://www.polarsys.org/capella/core/la/1.0.0', 
'http://www.polarsys.org/capella/core/pa/1.0.0', 
'http://www.polarsys.org/capella/core/epbs/1.0.0', 
'http://www.polarsys.org/capella/core/sharedmodel/1.0.0', 
'http://www.polarsys.org/capella/core/requirement/1.0.0', 
'http://www.polarsys.org/capella/core/information/1.0.0', 
'http://www.polarsys.org/capella/core/cs/1.0.0', 
'http://www.polarsys.org/capella/core/fa/1.0.0', 
'http://www.polarsys.org/capella/core/common/1.0.0', 
'http://www.polarsys.org/capella/core/interaction/1.0.0',
'http://www.polarsys.org/capella/common/activity/1.0.0',
'http://www.polarsys.org/capella/common/core/1.0.0')]

[import fr::obeo::dsl::designer::documentation::generator::capella::templates::helpers::CapellaDocumentationHelper /]
[import fr::obeo::dsl::designer::documentation::generator::capella::templates::ComponentHelper /]
[import fr::obeo::dsl::designer::documentation::generator::capella::templates::helpers::CapellaElementHelper /]
[import fr::obeo::dsl::designer::documentation::generator::capella::templates::helpers::AbstractFunctionHelper /]
[**
 * A template for generating the documentation of a LogicalComponent and its descendants from the semantic element.
 * @param component 
 */]
[template public InterfacesTemplate(component : cs::Component)]
[comment @main/]
[file ( getCleanFileName(component.oclAsType(modellingcore::AbstractNamedElement).name), false, 'UTF-8')]

[insertHeader('Capella report '+component.oclAsType(modellingcore::AbstractNamedElement).name)/]

[insertMainTitle(component.oclAsType(modellingcore::AbstractNamedElement).name)/]

[insertIndex(2, 3)/]

[insertBreakPage()/]

<!-- Document semantic content -->
[component.generateDocumentationContent()/]

[insertFooter('Copyrigth 2015')/]

[/file]
[/template]

[**
 * Generates the template semantic contents
 * @param logicalComponent 
 */]
[template public generateDocumentationContent(component : cs::Component)]

<h2>Root Component : [component.oclAsType(modellingcore::AbstractNamedElement).name/][component.insertObjectAnchor('title')/]</h2>
[component.generateDescriptionDivIfAny()/]
[component.generateComponentHierarchy()/]
[/template]

[template public generateComponentHierarchy(component : cs::Component)]
	[component.generateComponentContent()/]
	[for (child : cs::Component | component.eContents(cs::Component))]
		[child.generateComponentHierarchy()/]
	[/for] 
[/template]

[template public generateComponentContent(component : cs::Component)]
<h3>[component.oclAsType(modellingcore::AbstractNamedElement).name /] [if (not component.summary.oclIsUndefined())] : [component.summary/][/if][component.insertObjectAnchor('title')/] <small>['['/][component.getComponentPath()/][']'/]</small></h3>
[comment If the sub LogicalComponent has a description we want to print it in the generated document /]
[component.generateDescriptionDivIfAny()/]

[comment The two following elements will display a table holding information of connected flows /]
<!-- Connected flows -->
[if (component.getConnectedFlow(OrientationPortKind::IN)->notEmpty())]
	<h4>Incoming Component Exchanges:</h4>
	<p>This table presents the list of all incoming components exchanges arriving to Component [ component.oclAsType(modellingcore::AbstractNamedElement).name /].</p>
	[component.generateComponentExchangeTable(OrientationPortKind::IN)/]
[/if] 
 
	[if (component.getConnectedFlow(OrientationPortKind::OUT)->notEmpty())]
	<h4>Outgoing Component Exchanges</h4>
	<p>This table presents the list of all outgoing components exchanges starting from Component [ component.oclAsType(modellingcore::AbstractNamedElement).name /].</p>
	[component.generateComponentExchangeTable(OrientationPortKind::OUT)/]
[/if]
[if (component.getConnectedFlow(OrientationPortKind::INOUT)->notEmpty())]
	<h4>Bidirectional Component Exchanges:</h4>
	<p>This table presents the list of all bidirectional components exchanges connected to Component [ component.oclAsType(modellingcore::AbstractNamedElement).name /].</p>
	[component.generateComponentExchangeTable(OrientationPortKind::INOUT)/]
[/if] 
[if (component.providedInterfaces->notEmpty())]
<h4>Provided interfaces</h4>
[for (interface : Interface | component.providedInterfaces)]

	<li>[interface.cleanHTML('name')/]
	[interface.generateDescriptionDivIfAny()/]
[/for]
[/if]
[if (component.usedInterfaces->notEmpty())]
<h4>Used interfaces</h4>
[for (interface : Interface | component.usedInterfaces)]

	<li>[interface.cleanHTML('name')/]
	[interface.generateDescriptionDivIfAny()/]
[/for]
[/if]
[/template]


